## This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
## For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven
#
## This workflow uses actions that are not certified by GitHub.
## They are provided by a third-party and are governed by
## separate terms of service, privacy policy, and support
## documentation.
#
#name: ci cd follow
#
#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: maven
#      - name: Build with Maven
#        run: mvn clean install
#
#      - name: login to dockerhub
#        uses: docker/build-push-action@v5
#        with:
#          image: ogleh/ci-cd-repository
#          tags: v1,latest
#          registry: docker.io
#          dockerfile: Dockerfile
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#
#
#
#
##1-docker login
##2- build docker image
##1-push image to docker hub
#
#
##    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
##    - name: Update dependency graph
##      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6


name: CI/CD Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build with Maven
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Build and Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ogleh/ci-cd-repository:v1,ogleh/ci-cd-repository:latest

          # Step 6: Deploy to AWS EC2
      - name: Execute deployment script on EC2
        uses: appleboy/ssh-action@v0.1.1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ogleh
          key: ${{ secrets.EC2_SSH_KEY }}
          #          passphrase: ${{ secrets.EC2_PASSPHRASE }} # Optional, if your key has a passphrase
          script: |
            docker pull ogleh/ci-cd-repository:latest
            docker stop ci-cd-container || true
            docker rm ci-cd-container || true
            docker run -d --name ci-cd-container -p 8081:8080 ogleh/ci-cd-repository:latest
     



